#ifndef NGLSCENE_H_
#define NGLSCENE_H_
#include <ngl/Mat4.h>
#include <QElapsedTimer>
#include "cardlist.h"
#include <ngl/Transformation.h>
#include <ngl/Vec3.h>
#include "WindowParams.h"
#include <memory>
// this must be included after NGL includes else we get a clash with gl libs
#include <QOpenGLWindow>
//----------------------------------------------------------------------------------------------------------------------
/// @file NGLScene.h
/// @brief this class inherits from the Qt OpenGLWindow and allows us to use NGL to draw OpenGL
/// @author Jonathan Macey
/// @version 1.0
/// @date 10/9/13
/// Revision History :
/// This is an initial version used for the new NGL6 / Qt 5 demos
/// @class NGLScene
/// @brief our main glwindow widget for NGL applications all drawing elements are
/// put in this file
//----------------------------------------------------------------------------------------------------------------------

class NGLScene : public QOpenGLWindow
{
  public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief ctor for our NGL drawing class
    /// @param [in] parent the parent window to the class
    //----------------------------------------------------------------------------------------------------------------------
    NGLScene();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief dtor must close down ngl and release OpenGL resources
    //----------------------------------------------------------------------------------------------------------------------
    ~NGLScene() override;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the initialize class is called once when the window is created and we have a valid GL context
    /// use this to setup any default GL stuff
    //----------------------------------------------------------------------------------------------------------------------
    void initializeGL() override;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this is called everytime we want to draw the scene
    //----------------------------------------------------------------------------------------------------------------------
    void paintGL() override;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this is called everytime we resize the window
    //----------------------------------------------------------------------------------------------------------------------
    void resizeGL(int _w, int _h) override;


private:

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the windows params such as mouse and rotations etc
    //----------------------------------------------------------------------------------------------------------------------
    WinParams m_win;
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Mat4 m_view;
    ngl::Mat4 m_project;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief transformation stack for the gl transformations etc
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Transformation m_transform;
    std::vector<GLuint>m_cardtexture;
    std::vector<int>CardOrder = {0,0,1,1,2,2};
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a simple light use to illuminate the screen
    //----------------------------------------------------------------------------------------------------------------------
  int m_lightTimer;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief flag to indicate if were animating the light
    //----------------------------------------------------------------------------------------------------------------------
    bool m_animate;
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief timer function for animation buffer
    //----------------------------------------------------------------------------------------------------------------------
    QElapsedTimer clocktimer;
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief checks status of timer
    //----------------------------------------------------------------------------------------------------------------------
    bool istimerunning = false;
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief control to resets reveal animation on game reset
    //----------------------------------------------------------------------------------------------------------------------
    bool resetreveal = false;
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief records animation buffer start time
    //----------------------------------------------------------------------------------------------------------------------
    int startTime;
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief records animation buffer end time
    //----------------------------------------------------------------------------------------------------------------------
    int endTime;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method to load transform matrices to the shader
    //----------------------------------------------------------------------------------------------------------------------
    void loadMatricesToShader();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Qt Event called when a key is pressed
    /// @param [in] _event the Qt event to query for size etc
    //----------------------------------------------------------------------------------------------------------------------
    void keyPressEvent(QKeyEvent *_event) override;
    void updateLight();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief draw our scene passing in the shader to use
    /// @param[in] _shader the name of the shader to use when drawing
    //----------------------------------------------------------------------------------------------------------------------
    void drawScene();
    void timerEvent(QTimerEvent *_event) override;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief prevents user from using controls before starting the game loop
    //----------------------------------------------------------------------------------------------------------------------
    bool gamestart = false;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief begins the process of resatarting the game loop
    //----------------------------------------------------------------------------------------------------------------------
    bool restartgamestart = false;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief end the process of restarting the game loop
    //----------------------------------------------------------------------------------------------------------------------
    bool restartgameend = false;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief returns status of card texture shuffle
    //----------------------------------------------------------------------------------------------------------------------
    bool shuffledone = false;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief records status of attempt one by user
    //----------------------------------------------------------------------------------------------------------------------
    bool m_attemptOne = false;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief records status of attempt two by user
    //----------------------------------------------------------------------------------------------------------------------
    bool m_attemptTwo = false;
    //pair checkers
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief records status of first pair
    //----------------------------------------------------------------------------------------------------------------------
    bool m_isPairedOne = false;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief records status of seccond pair
    //----------------------------------------------------------------------------------------------------------------------
    bool m_isPairedTwo = false;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief records status of third pair
    //----------------------------------------------------------------------------------------------------------------------
    bool m_isPairedThree = false;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief records status to flip cards back over
    //----------------------------------------------------------------------------------------------------------------------
    bool flipitback = false;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief returns int of the texture of players first attempt in the turn
    //----------------------------------------------------------------------------------------------------------------------
    int choiceOnetxt;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief returns int of the texture of players seccond attempt in the turn
    //----------------------------------------------------------------------------------------------------------------------
    int choiceTwotxt;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief returns int of the card number of players seccond attempt in the turn
    //----------------------------------------------------------------------------------------------------------------------
    int card1num;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief returns int of the card number of players seccond attempt in the turn
    //----------------------------------------------------------------------------------------------------------------------
    int card2num;

    
    //card 0 Pointer
    std::unique_ptr<cardlist>m_card;
    //card 1 Pointer
    std::unique_ptr<cardlist>m_card1;
    //card 2 Pointer
    std::unique_ptr<cardlist>m_card2;
    //card 3 Pointer
    std::unique_ptr<cardlist>m_card3;
    //card 4 Pointer
    std::unique_ptr<cardlist>m_card4;
    //card 5 Pointer
    std::unique_ptr<cardlist>m_card5;
    //selection tool Pointer
    std::unique_ptr<cardlist>m_selectionTool;
    //Vector list to hold card Pointers
    std::vector<std::unique_ptr<cardlist>>cards;
    //Records the card number as an int
    int num_ofcard = 0;
    //Holds shaders
    const char*ColourCard = "ColourCard";
    
};



#endif
